// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pkg/querypoints/proto/querypoints.proto

package go_micro_service_querypoints

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for QueryPoints service

func NewQueryPointsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for QueryPoints service

type QueryPointsService interface {
	GetPaginated(ctx context.Context, in *RequestPageOptions, opts ...client.CallOption) (*ResponsePage, error)
	GetList(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseQueryPointsArray, error)
	GetByID(ctx context.Context, in *RequestQueryPointID, opts ...client.CallOption) (*ResponseQueryPoint, error)
	GetByName(ctx context.Context, in *RequestQueryPointQuery, opts ...client.CallOption) (*ResponseQueryPoint, error)
	GetByIDs(ctx context.Context, opts ...client.CallOption) (QueryPoints_GetByIDsService, error)
	Create(ctx context.Context, in *RequestCreateQueryPoint, opts ...client.CallOption) (*ResponseQueryPoint, error)
	Update(ctx context.Context, in *RequestUpdateQueryPoint, opts ...client.CallOption) (*ResponseQueryPoint, error)
	Delete(ctx context.Context, in *RequestQueryPointID, opts ...client.CallOption) (*ResponseQueryPoint, error)
}

type queryPointsService struct {
	c    client.Client
	name string
}

func NewQueryPointsService(name string, c client.Client) QueryPointsService {
	return &queryPointsService{
		c:    c,
		name: name,
	}
}

func (c *queryPointsService) GetPaginated(ctx context.Context, in *RequestPageOptions, opts ...client.CallOption) (*ResponsePage, error) {
	req := c.c.NewRequest(c.name, "QueryPoints.GetPaginated", in)
	out := new(ResponsePage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryPointsService) GetList(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseQueryPointsArray, error) {
	req := c.c.NewRequest(c.name, "QueryPoints.GetList", in)
	out := new(ResponseQueryPointsArray)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryPointsService) GetByID(ctx context.Context, in *RequestQueryPointID, opts ...client.CallOption) (*ResponseQueryPoint, error) {
	req := c.c.NewRequest(c.name, "QueryPoints.GetByID", in)
	out := new(ResponseQueryPoint)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryPointsService) GetByName(ctx context.Context, in *RequestQueryPointQuery, opts ...client.CallOption) (*ResponseQueryPoint, error) {
	req := c.c.NewRequest(c.name, "QueryPoints.GetByName", in)
	out := new(ResponseQueryPoint)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryPointsService) GetByIDs(ctx context.Context, opts ...client.CallOption) (QueryPoints_GetByIDsService, error) {
	req := c.c.NewRequest(c.name, "QueryPoints.GetByIDs", &RequestQueryPointID{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &queryPointsServiceGetByIDs{stream}, nil
}

type QueryPoints_GetByIDsService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*RequestQueryPointID) error
	Recv() (*ResponseQueryPoint, error)
}

type queryPointsServiceGetByIDs struct {
	stream client.Stream
}

func (x *queryPointsServiceGetByIDs) Close() error {
	return x.stream.Close()
}

func (x *queryPointsServiceGetByIDs) Context() context.Context {
	return x.stream.Context()
}

func (x *queryPointsServiceGetByIDs) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *queryPointsServiceGetByIDs) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *queryPointsServiceGetByIDs) Send(m *RequestQueryPointID) error {
	return x.stream.Send(m)
}

func (x *queryPointsServiceGetByIDs) Recv() (*ResponseQueryPoint, error) {
	m := new(ResponseQueryPoint)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryPointsService) Create(ctx context.Context, in *RequestCreateQueryPoint, opts ...client.CallOption) (*ResponseQueryPoint, error) {
	req := c.c.NewRequest(c.name, "QueryPoints.Create", in)
	out := new(ResponseQueryPoint)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryPointsService) Update(ctx context.Context, in *RequestUpdateQueryPoint, opts ...client.CallOption) (*ResponseQueryPoint, error) {
	req := c.c.NewRequest(c.name, "QueryPoints.Update", in)
	out := new(ResponseQueryPoint)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryPointsService) Delete(ctx context.Context, in *RequestQueryPointID, opts ...client.CallOption) (*ResponseQueryPoint, error) {
	req := c.c.NewRequest(c.name, "QueryPoints.Delete", in)
	out := new(ResponseQueryPoint)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QueryPoints service

type QueryPointsHandler interface {
	GetPaginated(context.Context, *RequestPageOptions, *ResponsePage) error
	GetList(context.Context, *empty.Empty, *ResponseQueryPointsArray) error
	GetByID(context.Context, *RequestQueryPointID, *ResponseQueryPoint) error
	GetByName(context.Context, *RequestQueryPointQuery, *ResponseQueryPoint) error
	GetByIDs(context.Context, QueryPoints_GetByIDsStream) error
	Create(context.Context, *RequestCreateQueryPoint, *ResponseQueryPoint) error
	Update(context.Context, *RequestUpdateQueryPoint, *ResponseQueryPoint) error
	Delete(context.Context, *RequestQueryPointID, *ResponseQueryPoint) error
}

func RegisterQueryPointsHandler(s server.Server, hdlr QueryPointsHandler, opts ...server.HandlerOption) error {
	type queryPoints interface {
		GetPaginated(ctx context.Context, in *RequestPageOptions, out *ResponsePage) error
		GetList(ctx context.Context, in *empty.Empty, out *ResponseQueryPointsArray) error
		GetByID(ctx context.Context, in *RequestQueryPointID, out *ResponseQueryPoint) error
		GetByName(ctx context.Context, in *RequestQueryPointQuery, out *ResponseQueryPoint) error
		GetByIDs(ctx context.Context, stream server.Stream) error
		Create(ctx context.Context, in *RequestCreateQueryPoint, out *ResponseQueryPoint) error
		Update(ctx context.Context, in *RequestUpdateQueryPoint, out *ResponseQueryPoint) error
		Delete(ctx context.Context, in *RequestQueryPointID, out *ResponseQueryPoint) error
	}
	type QueryPoints struct {
		queryPoints
	}
	h := &queryPointsHandler{hdlr}
	return s.Handle(s.NewHandler(&QueryPoints{h}, opts...))
}

type queryPointsHandler struct {
	QueryPointsHandler
}

func (h *queryPointsHandler) GetPaginated(ctx context.Context, in *RequestPageOptions, out *ResponsePage) error {
	return h.QueryPointsHandler.GetPaginated(ctx, in, out)
}

func (h *queryPointsHandler) GetList(ctx context.Context, in *empty.Empty, out *ResponseQueryPointsArray) error {
	return h.QueryPointsHandler.GetList(ctx, in, out)
}

func (h *queryPointsHandler) GetByID(ctx context.Context, in *RequestQueryPointID, out *ResponseQueryPoint) error {
	return h.QueryPointsHandler.GetByID(ctx, in, out)
}

func (h *queryPointsHandler) GetByName(ctx context.Context, in *RequestQueryPointQuery, out *ResponseQueryPoint) error {
	return h.QueryPointsHandler.GetByName(ctx, in, out)
}

func (h *queryPointsHandler) GetByIDs(ctx context.Context, stream server.Stream) error {
	return h.QueryPointsHandler.GetByIDs(ctx, &queryPointsGetByIDsStream{stream})
}

type QueryPoints_GetByIDsStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ResponseQueryPoint) error
	Recv() (*RequestQueryPointID, error)
}

type queryPointsGetByIDsStream struct {
	stream server.Stream
}

func (x *queryPointsGetByIDsStream) Close() error {
	return x.stream.Close()
}

func (x *queryPointsGetByIDsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *queryPointsGetByIDsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *queryPointsGetByIDsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *queryPointsGetByIDsStream) Send(m *ResponseQueryPoint) error {
	return x.stream.Send(m)
}

func (x *queryPointsGetByIDsStream) Recv() (*RequestQueryPointID, error) {
	m := new(RequestQueryPointID)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *queryPointsHandler) Create(ctx context.Context, in *RequestCreateQueryPoint, out *ResponseQueryPoint) error {
	return h.QueryPointsHandler.Create(ctx, in, out)
}

func (h *queryPointsHandler) Update(ctx context.Context, in *RequestUpdateQueryPoint, out *ResponseQueryPoint) error {
	return h.QueryPointsHandler.Update(ctx, in, out)
}

func (h *queryPointsHandler) Delete(ctx context.Context, in *RequestQueryPointID, out *ResponseQueryPoint) error {
	return h.QueryPointsHandler.Delete(ctx, in, out)
}
